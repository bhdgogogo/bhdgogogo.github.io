(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{493:function(t,s,a){"use strict";a.r(s);var e=a(1),v=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"scoped"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scoped"}},[t._v("#")]),t._v(" scoped")]),t._v(" "),s("p",[t._v("如果直接通过"),s("code",[t._v("style")]),t._v("标签写样式，此时编写的样式是全局样式，会影响到所有的组件")]),t._v(" "),s("p",[t._v("添加"),s("code",[t._v("scoped")]),t._v("属性之后，样式将成为局部样式，只对当前组件生效")]),t._v(" "),s("p",[s("strong",[t._v("如何实现的？")])]),t._v(" "),s("ul",[s("li",[t._v("当我们在组件中使用"),s("code",[t._v("scoped")]),t._v("样式时，"),s("code",[t._v("vue")]),t._v("会自动为组件中的所有元素生成一个随机的属性，形如："),s("code",[t._v("data-v-7a7a37b1")]),t._v(",生成后，所有的选择器都会在最后添加一个"),s("code",[t._v("[data-v-7a7a37b1]")])]),t._v(" "),s("li",[s("code",[t._v("h1 -> h1[data-v-7a7a37b1]")]),t._v("—— 属性选择器")]),t._v(" "),s("li",[s("code",[t._v(".box1 -> .box1[data-v-7a7a37b1]")])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("随机生成的属性，除了会添加到当前组件内的所有元素上")]),t._v(" "),s("li",[t._v("也会添加到当前组件引入的其他组件的根元素上（前提引入的组件是单根组件）")]),t._v(" "),s("li",[t._v("这样设计是为了，可以通过父组件来为子组件设置一些样式")])]),t._v(" "),s("p",[s("code",[t._v(":deep()")]),t._v(" —— 特殊场景会用到，可以改变当前组件中所有该元素的样式\n"),s("code",[t._v(":global()")]),t._v("—— 全局选择器")]),t._v(" "),s("h2",{attrs:{id:"module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" module")]),t._v(" "),s("p",[s("code",[t._v("css")]),t._v("模块")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("自动的对模块中的类名进行 hash 化，来确保类名的唯一性")])]),t._v(" "),s("li",[s("p",[t._v("在模板中可以通过 "),s("code",[t._v("$style.")]),t._v("类名 使用，比如"),s("code",[t._v("$style.box1")])])]),t._v(" "),s("li",[s("p",[t._v("也可以通过"),s("code",[t._v("module")]),t._v("的属性值来指定变量名，比如设置"),s("code",[t._v('module="c"')]),t._v("，就通过"),s("code",[t._v("c.box1")]),t._v("调用")]),t._v(" "),s("blockquote",[s("p",[t._v("注意，通过这种方式来声明的样式，在使用"),s("code",[t._v("class")]),t._v("调用时，要使用"),s("code",[t._v(':class="xxxx"')]),t._v("，因为此时样式成为了变量")])])])]),t._v(" "),s("h2",{attrs:{id:"props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" props")]),t._v(" "),s("p",[t._v("子组件中的数据通常不会在子组件中直接定义，因为这样会导致数据和视图发生耦合，显示数据的组件就负责显示数据，传数据的组件就负责传数据")]),t._v(" "),s("p",[t._v("子组件中的数据通常会在创建组件实例时确定")]),t._v(" "),s("p",[t._v("父组件可以通过 "),s("code",[t._v("props")]),t._v(" 来将数据传递给子组件")]),t._v(" "),s("p",[s("strong",[t._v("使用"),s("code",[t._v("props")])])]),t._v(" "),s("ol",[s("li",[t._v("先在子组件中定义"),s("code",[t._v("props")])]),t._v(" "),s("li",[t._v("父组件通过"),s("code",[t._v("props")]),t._v("定义的属性来把数据传给子组件")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：父组件传递给子组件的"),s("code",[t._v("props")]),t._v("都是只读的，无法修改 —— 单项数据流 —— 确保数据的安全性，降低项目代码的复杂度"),s("br"),t._v("\n即使可以修改，我们也尽量不要在子组件中去修改父组件的数据"),s("br"),t._v("\n如果非得要改，具体方法后边再讲（自定义事件）")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("props")]),t._v("的配置")])]),t._v(" "),s("p",[t._v("通过对象的方式来给props赋值")]),t._v(" "),s("div",{staticClass:"language-javaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("isCheck")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("maxLength")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("required")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 帮助检查有没有传该属性，写不写都行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"哈哈"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  默认值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("validator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 校验")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"嘻嘻"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"杂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#杂"}},[t._v("#")]),t._v(" 杂")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("vue3")]),t._v("中定义组件的方式有两种")]),t._v(" "),s("ol",[s("li",[t._v("单根组件 一个"),s("code",[t._v("div")]),t._v("然后里边写其他的元素")]),t._v(" "),s("li",[t._v("多根组件 直接写元素 不在外边套一个"),s("code",[t._v("div")])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类和内联样式也是可以通过变量的方式来绑定的")])]),t._v(" "),s("li",[s("p",[t._v("不要追求一步到位，就一点一点的做")])]),t._v(" "),s("li",[s("p",[t._v("结构，表现，行为")])]),t._v(" "),s("li",[s("p",[t._v("设计思想是，各组件之间尽量减少互相影响，降低组件之间的耦合")])]),t._v(" "),s("li",[s("p",[t._v("每一层外部都尽量设置一个容器")])]),t._v(" "),s("li",[s("p",[t._v("渐变不是颜色，是图片")])]),t._v(" "),s("li",[s("p",[t._v("不用引入的属性或者函数，称作为宏指令，比如"),s("code",[t._v("defineProps")]),t._v("，就称作一个宏")]),t._v(" "),s("blockquote",[s("p",[t._v("图片在垂直放入容器中时，图片底部与容器中间有一条缝 —— 修改"),s("code",[t._v("vertical-align")]),t._v(" 的值，只要不是"),s("code",[t._v("baseline")]),t._v("，问题即可解决")])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);