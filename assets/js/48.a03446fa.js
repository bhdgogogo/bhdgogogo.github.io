(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{475:function(t,a,s){"use strict";s.r(a);var n=s(1),v=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),a("p",[t._v("根据函数调用方式的不同，this的值也不同：")]),t._v(" "),a("ol",[a("li",[t._v("以函数形式调用，this是window")]),t._v(" "),a("li",[t._v("以方法形式调用，this是调用方法的对象 —— 谁调的就是谁")]),t._v(" "),a("li",[t._v("构造函数中，this是新建的对象")]),t._v(" "),a("li",[t._v("箭头函数没有自己的this，由外层作用域决定")]),t._v(" "),a("li",[t._v("通过call和apply调用的函数，它们的第一个参数就是函数的this")]),t._v(" "),a("li",[t._v("通过bind返回的函数，this由bind第一个参数决定（无法修改）")])]),t._v(" "),a("h2",{attrs:{id:"instanceof-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-实例"}},[t._v("#")]),t._v(" instanceof —— 实例")]),t._v(" "),a("p",[t._v("如果某个对象是由某个类所创建的，我们就说该对象是这个类的一个实例")]),t._v(" "),a("p",[a("code",[t._v("a instanceof b")]),t._v("  —— 检查a是不是由b创建的")]),t._v(" "),a("p",[t._v("a实例对象—— b构造函数，类")]),t._v(" "),a("h2",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),a("p",[t._v("类里面的代码，默认就是严格模式")]),t._v(" "),a("p",[t._v("静态属性只能通过类来访问")]),t._v(" "),a("p",[t._v("constructor —— 构造函数")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gender")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gender\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("面向对象 —— 封装，继承，多态")]),t._v(" "),a("p",[t._v("封装 —— 私有属性 #name 私有属性，类外部不能直接访问，只能在类内部访问 —— 外部通过get和set访问")]),t._v(" "),a("p",[t._v("多态")]),t._v(" "),a("ul",[a("li",[t._v("在JS中不会检查参数的类型，所以这就意味着任何数据都可以作为参数传递")]),t._v(" "),a("li",[t._v("要调用某个函数，无需指定的类型，只要对象满足某些条件即可")]),t._v(" "),a("li",[t._v("如果一个东西走路像鸭子，叫起来像鸭子，那么它就是鸭子")]),t._v(" "),a("li",[a("strong",[t._v("多态为我们提供了灵活性")])])]),t._v(" "),a("p",[t._v("封装 —— 安全性\n继承 —— 扩展性\n多态 —— 灵活性")]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("继承")]),t._v(" "),a("ul",[a("li",[t._v("可以通过extends关键来完成继承")]),t._v(" "),a("li",[t._v("当一个类继承另一个类时，就相当于将另一个类中的代码复制到了当前类中（简单理解）")]),t._v(" "),a("li",[t._v("继承发生时，被继承的类称为 父类（超类），继承的类称为 子类")]),t._v(" "),a("li",[t._v("通过继承可以减少重复的代码，并且可以在不修改一个类的前提对其进行扩展")])]),t._v(" "),a("h2",{attrs:{id:"原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),a("p",[t._v("会添加到原型对象中的情况")]),t._v(" "),a("ul",[a("li",[t._v("set(){} —— 这样声明的函数就存到了类的原型对象中")]),t._v(" "),a("li",[t._v("主动往原型对象中添加方法")])]),t._v(" "),a("h2",{attrs:{id:"call和apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call和apply"}},[t._v("#")]),t._v(" call和apply")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("fn.call()")]),t._v("就是在调用"),a("code",[t._v("fn")]),t._v("的"),a("code",[t._v("call")]),t._v("方法 —— 其实也是执行"),a("code",[t._v("fn")]),t._v("这个函数")]),t._v(" "),a("p",[t._v("为什么这么用？")]),t._v(" "),a("ul",[a("li",[t._v("call 和 apply除了可以调用函数，还可以用来指定函数中的this")]),t._v(" "),a("li",[t._v("call和apply的第一个参数，将会成为函数的this")]),t._v(" "),a("li",[t._v("通过call方法调用函数，函数的实参直接在第一个参数后一个一个的列出来")]),t._v(" "),a("li",[t._v("通过apply方法调用函数，函数的实参需要通过一个数组传递")])]),t._v(" "),a("p",[t._v("高阶函数 —— 参数是函数，返回值也是一个函数")]),t._v(" "),a("p",[t._v("bind() 是函数的方法，可以用来创建一个新的函数")]),t._v(" "),a("ul",[a("li",[t._v("bind可以为新函数绑定this —— 第一个参数")]),t._v(" "),a("li",[t._v("bind可以为新函数绑定参数 —— 第一个参数后边的参数")])]),t._v(" "),a("p",[a("strong",[t._v("箭头函数没有自身的this，它的this由外层作用域决定，也无法通过call apply 和 bind修改它的this 箭头函数中没有arguments")])]),t._v(" "),a("p",[t._v("arguments不太好用 —— 可变参数可以代替")]),t._v(" "),a("h2",{attrs:{id:"可变参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[t._v("#")]),t._v(" 可变参数")])])}),[],!1,null,null,null);a.default=v.exports}}]);