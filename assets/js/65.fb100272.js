(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{494:function(v,_,e){"use strict";e.r(_);var t=e(1),a=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"选项式-api-和组合式-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#选项式-api-和组合式-api"}},[v._v("#")]),v._v(" 选项式 api 和组合式 api")]),v._v(" "),_("p",[_("strong",[v._v("选项式"),_("code",[v._v("api")])])]),v._v(" "),_("p",[v._v("不同的选项配置不同的内容，"),_("code",[v._v("data")]),v._v("就配置"),_("code",[v._v("data")]),v._v("，"),_("code",[v._v("methonds")]),v._v("就配置"),_("code",[v._v("methonds")])]),v._v(" "),_("p",[_("strong",[v._v("组合式"),_("code",[v._v("api")])])]),v._v(" "),_("p",[_("strong",[v._v("钩子函数—— "),_("code",[v._v("setup")])])]),v._v(" "),_("p",[v._v("可以通过这个函数向外部暴露组件的配置")]),v._v(" "),_("p",[v._v("对象的形式编写不方便 => "),_("code",[v._v("setup")]),v._v("函数编写")]),v._v(" "),_("p",[v._v("在组合式"),_("code",[v._v("api")]),v._v("中直接声明的变量，就是一个普通的变量，不是响应式的，修改这些属性时，不会在视图中产生效果")]),v._v(" "),_("p",[_("strong",[v._v("使用"),_("code",[v._v("reactive")])]),v._v(" "),_("code",[v._v('import { reactive } from "vue"')]),v._v(" "),_("code",[v._v("const a = reactive({xxx})")]),v._v(" —— 对该对象进行代理，并产生一个响应式的对象赋值给"),_("code",[v._v("a")])]),v._v(" "),_("div",{staticClass:"language-javascript extra-class"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("script setup"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n  "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//")]),v._v("\n  可以直接编写所有类型的代码，声明变量，申明函数，不用再写"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("export")]),v._v("，data这些，直接像编写正常代码一样编写即可\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("script"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n")])])]),_("p",[_("code",[v._v("shallowReactive")]),v._v("——浅层代理，只将根位置的元素变成响应式数据")]),v._v(" "),_("p",[_("code",[v._v("reactive")]),v._v(" —— 深层代理，所有元素都会变成响应式数据，不管它在第几层")]),v._v(" "),_("h2",{attrs:{id:"ref"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[v._v("#")]),v._v(" ref")]),v._v(" "),_("p",[_("code",[v._v("reactive")]),v._v("只能操作对象 —— "),_("code",[v._v("ref")]),v._v(" "),_("code",[v._v("ref")]),v._v("的原理：\n"),_("code",[v._v("ref")]),v._v("在生成响应式代理时，它是将值包装为了一个对象"),_("code",[v._v("（RefImpl） 0 --\x3e {value:0}")]),v._v("\n访问"),_("code",[v._v("ref")]),v._v("对象时，必须通过 对象.value 来访问其中的值\n在模板中，"),_("code",[v._v("ref")]),v._v("对象会被自动解包")]),v._v(" "),_("p",[_("code",[v._v("vue")]),v._v("给我们提供了一个语法糖 => "),_("code",[v._v("$")]),v._v("，使得"),_("code",[v._v("ref")]),v._v("对象在"),_("code",[v._v("script")]),v._v("标签中也可以自动解包")]),v._v(" "),_("p",[v._v("但"),_("code",[v._v("$")]),v._v("是"),_("code",[v._v("Beta")]),v._v("的，需要在"),_("code",[v._v("vite")]),v._v("插件中（"),_("code",[v._v("vite.config.js")]),v._v("）做一些配置 —— "),_("code",[v._v("reactivityTransform:true")]),v._v(" "),_("code",[v._v("$ref()")]),v._v("，实际开发中谨慎使用")]),v._v(" "),_("p",[_("code",[v._v("ref")]),v._v("对象在模板中可以自动解包（前提是，"),_("code",[v._v("ref")]),v._v("对象必须是顶层对象，如果顶层对象不是 ref，内层对象是"),_("code",[v._v("ref")]),v._v("，那调用内层对象不会自动解包，就需要加伤"),_("code",[v._v("value")]),v._v("来显示对应值了）")]),v._v(" "),_("h2",{attrs:{id:"模板语法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[v._v("#")]),v._v(" 模板语法")]),v._v(" "),_("p",[v._v("除了组件中的变量外，vue 也给我们提供了一些全局对象来供我们访问")]),v._v(" "),_("p",[v._v("比如："),_("code",[v._v("Date, Math, RegExp, JSON...")]),v._v(" （"),_("code",[v._v("vue")]),v._v("文档可以查到）")]),v._v(" "),_("p",[v._v("同时，可以往应用中添加全局变量 —— "),_("code",[v._v("app.config.globalProperties")]),v._v("（一般也用不到）\n使用插值(双大括号)，只能使用表达式")]),v._v(" "),_("h2",{attrs:{id:"v-bind"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#v-bind"}},[v._v("#")]),v._v(" v-bind")]),v._v(" "),_("p",[v._v("当我们需要为标签"),_("strong",[v._v("动态")]),v._v("设置属性时，就需要使用"),_("code",[v._v("v-bind")]),v._v("指令"),_("br"),v._v(" "),_("code",[v._v("v-bind")]),v._v("可以简写为 :")]),v._v(" "),_("p",[v._v("使用时可以理解为 "),_("strong",[v._v(":属性名=“变量”")])]),v._v(" "),_("p",[v._v("需要一下子设置多个属性可以使用"),_("code",[v._v("v-bind")])]),v._v(" "),_("blockquote",[_("p",[v._v("当我们为一个布尔值设置属性时，\n如果值为"),_("code",[v._v("tru")]),v._v("e，则元素上有该属性（转换后为"),_("code",[v._v("true")]),v._v("，也算"),_("code",[v._v("true")]),v._v("）\n如果值为"),_("code",[v._v("false")]),v._v("，则元素没有该属性（转换后为"),_("code",[v._v("false")]),v._v("，也算"),_("code",[v._v("false")]),v._v('）\n特殊情况："" 空串，在这里会被当成真值')])]),v._v(" "),_("h2",{attrs:{id:"杂"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#杂"}},[v._v("#")]),v._v(" 杂")]),v._v(" "),_("ul",[_("li",[v._v("改变量只会影响到变量自己，在"),_("code",[v._v("js")]),v._v("中，无法实现对一个变量的代理")]),v._v(" "),_("li",[v._v("在模板中，通过双大括号（插值）来直接访问到组件实例的属性（组件中声明的变量）")]),v._v(" "),_("li",[v._v("所有全局的配置都是在"),_("code",[v._v("app")]),v._v("（"),_("code",[v._v("app")]),v._v("代表整个应用）中设置的")]),v._v(" "),_("li",[v._v("插值实际上就是在修改元素的 "),_("code",[v._v("textContent")]),v._v(" =>（如果内容中含有标签，标签会被转义显示，不会作为标签生效）")]),v._v(" "),_("li",[v._v("空串通常情况下会被转换为"),_("code",[v._v("false")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);