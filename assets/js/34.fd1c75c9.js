(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{463:function(_,o,t){"use strict";t.r(o);var v=t(1),e=Object(v.a)({},(function(){var _=this,o=_._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("p",[o("strong",[_._v("proto")]),_._v("（隐式原型）与 "),o("strong",[_._v("prototype")]),_._v("（显式原型）")]),_._v(" "),o("h2",{attrs:{id:"概念"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[_._v("#")]),_._v(" 📄 概念")]),_._v(" "),o("h3",{attrs:{id:"prototype"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[_._v("#")]),_._v(" 1️⃣ prototype")]),_._v(" "),o("p",[o("code",[_._v("prototype")]),_._v(" "),o("strong",[_._v("—— 显式原型 ——")]),_._v(" "),o("strong",[_._v("explicit prototype property")])]),_._v(" "),o("p",[_._v("每一个函数在创建之后都会有一个"),o("code",[_._v("prototype")]),_._v("的属性，这个属性"),o("strong",[_._v("指向")]),_._v("函数端的原型"),o("strong",[_._v("对象")])]),_._v(" "),o("p",[_._v("❗️ "),o("strong",[_._v("重点： 指向一个对象，而且是函数的原型对象")])]),_._v(" "),o("p",[_._v("xxx.prototype，原型对象长什么样呢？，我们输出一下看看")]),_._v(" "),o("div",{staticClass:"language-javascript extra-class"},[o("pre",{pre:!0,attrs:{class:"language-javascript"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("function")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[_._v("Foo")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n  "),o("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("this")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("x "),o("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n\nconsole"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[_._v("log")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[_._v('"Foo.prototype: "')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Foo")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("prototype"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/bhdgogogo/cloud-img/img/blogImg/js_2.png",alt:"图"}})]),_._v(" "),o("p",[_._v("它就长上图这个样子，它就是 Foo 的原型对象 —— "),o("code",[_._v("Foo.prototype")]),_._v("，它首先是个对象，同时有一个"),o("code",[_._v("constructor")]),_._v("属性，指回该构造函数"),o("code",[_._v("Foo")]),_._v("，还有一个"),o("code",[_._v("[[Prototype]]")]),_._v("属性，就是它的"),o("code",[_._v("__proto__")]),_._v("，指向该原型对象的构造者的原型对象，对象的构造者都是"),o("code",[_._v("Object")]),_._v("，所以"),o("code",[_._v("[[Prototype]]")]),_._v("就是"),o("code",[_._v("Object.prototype")])]),_._v(" "),o("blockquote",[o("p",[_._v("你可以用"),o("code",[_._v("xxx.prototype.__proto__")]),_._v("读取到"),o("code",[_._v("[[Prototype]]")]),_._v("，"),o("code",[_._v("ES6")]),_._v("之后，你也可以使用"),o("code",[_._v("Object.getPrototypeOf(xxx.prototype)")]),_._v("读取"),o("code",[_._v("[[Prototype]]")]),_._v("，它与"),o("code",[_._v("__proto__")]),_._v("是等价的")])]),_._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"title"}),o("p",[_._v("注意：prototype 是构造函数独有的属性")]),_._v(" "),o("p",[_._v("通过"),o("code",[_._v("Function.prototype.bind")]),_._v("方法构造出来的函数是个例外，它没有"),o("code",[_._v("prototype")]),_._v("属性。")])]),o("h3",{attrs:{id:"proto"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[_._v("#")]),_._v(" 2️⃣ "),o("strong",[_._v("proto")])]),_._v(" "),o("p",[o("code",[_._v("__protp__")]),_._v(" "),o("strong",[_._v("—— 隐式原型 ——")]),_._v(" "),o("strong",[_._v("implicit prototype link")])]),_._v(" "),o("p",[o("code",[_._v("__protp__")]),_._v("用来读取或设置当前对象构造者（构造函数）的原型对象（"),o("code",[_._v("prototype")]),_._v("），JS 中任意对象都有一个内置属性"),o("code",[_._v("[[prototype]]")])]),_._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"title"}),o("p",[o("code",[_._v("Function")]),_._v(" 的"),o("code",[_._v("__proto__")]),_._v("指向其构造函数 "),o("code",[_._v("Function.prototype")]),_._v("，也就是 "),o("code",[_._v("Function")]),_._v(" 的原型对象")]),_._v(" "),o("p",[o("code",[_._v("Object")]),_._v("作为一个构造函数(是一个函数对象!!函数对象!!),所以他的**"),o("code",[_._v("__proto__")]),_._v("**指向 "),o("code",[_._v("Function.prototype")])]),_._v(" "),o("p",[o("code",[_._v("Function.prototype")]),_._v("的"),o("code",[_._v("__proto__")]),_._v("指向其构造函数"),o("code",[_._v("Object")]),_._v("的"),o("code",[_._v("prototype")])]),_._v(" "),o("p",[o("code",[_._v("Object.prototype")]),_._v(" 的"),o("code",[_._v("__proto__")]),_._v("值为"),o("code",[_._v("null")]),_._v(" —— 到尽头了")])]),o("p",[_._v("显式原型属性和隐式原型属性都指向一个原型对象，只有一个原型对象")]),_._v(" "),o("p",[_._v("对象的"),o("code",[_._v("__prototype__")]),_._v("属性通常与其构造函数的"),o("code",[_._v("prototype")]),_._v("属性相互对应")]),_._v(" "),o("blockquote",[o("p",[_._v("对象身上一定有"),o("code",[_._v("__proto__")]),_._v("属性"),o("br"),_._v("\n构造函数身上一定有"),o("code",[_._v("prototype")]),_._v("方法")])]),_._v(" "),o("h2",{attrs:{id:"作用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[_._v("#")]),_._v(" 作用")]),_._v(" "),o("ul",[o("li",[_._v("显示原型： 用来实现基于原型的继承，还有属性的共享")]),_._v(" "),o("li",[_._v("隐式原型 ： 构成原型链，同样用于实现基于原型的继承。当我们访问"),o("code",[_._v("obj")]),_._v("这个对象中的属性时，如果在"),o("code",[_._v("obj")]),_._v("中找不到，就沿着"),o("code",[_._v("proto")]),_._v("依次查找。")])]),_._v(" "),o("h2",{attrs:{id:"原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[_._v("#")]),_._v(" ⭐️ 原型链")]),_._v(" "),o("p",[o("code",[_._v("_proto_")]),_._v("的指向根据"),o("code",[_._v("ECMA")]),_._v("中的定义 "),o("em",[_._v("'to the value of its constructor’s \"prototype\" '")]),_._v(" ---指向创建这个对象的函数的显式原型。")]),_._v(" "),o("p",[o("strong",[_._v("所以关键点还是在于找到创建这个对象的构造函数")])]),_._v(" "),o("p",[o("code",[_._v("JS")]),_._v("中对象创建的方式，一眼看过去似乎有三种方式：")]),_._v(" "),o("ul",[o("li",[_._v("对象字面量的方式")]),_._v(" "),o("li",[o("code",[_._v("new")]),_._v("的方式")]),_._v(" "),o("li",[o("code",[_._v("ES5")]),_._v("中的"),o("code",[_._v("Object.create()")])])]),_._v(" "),o("p",[o("strong",[_._v("但其实本质上都是通过 new 来创建的")])]),_._v(" "),o("p",[_._v("对于原型链以及"),o("code",[_._v("proto")]),_._v("与"),o("code",[_._v("prototype")]),_._v("之间的关系，可以参照下图来理解")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/bhdgogogo/cloud-img/img/blogImg/js_1.png",alt:"图片1"}})]),_._v(" "),o("p",[_._v("关于上图，以下几点需要特别注意：")]),_._v(" "),o("hr"),_._v("\n### :one: 对象\n"),o("p",[_._v("在 JS 里，万物皆对象。方法("),o("code",[_._v("Function")]),_._v(")是对象，方法的原型("),o("code",[_._v("Function.prototype")]),_._v(")也是对象。因此，它们都会具有对象共有的特点。")]),_._v(" "),o("p",[_._v("即：对象具有属性"),o("code",[_._v("__proto__")]),_._v("，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，"),o("strong",[_._v("这保证了实例能够访问在构造函数原型中定义的属性和方法")])]),_._v(" "),o("hr"),_._v("  \n### :two: 函数方法(`Function`)\n"),o("p",[_._v("函数方法这个特殊的对象，除了和其他对象一样有上述"),o("code",[_._v("_proto_")]),_._v("属性之外，还有自己特有的属性——原型属性（"),o("code",[_._v("prototype")]),_._v("）")]),_._v(" "),o("p",[_._v("这个属性是一个指针，指向一个对象 👇")]),_._v(" "),o("p",[o("strong",[_._v("这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象）")])]),_._v(" "),o("p",[_._v("原型对象也有一个属性，叫做"),o("code",[_._v("constructor")]),_._v("，这个属性包含了一个指针，指回原构造函数")]),_._v(" "),o("hr"),_._v("  \n### :three: 构造函数首先是个函数\n"),o("p",[_._v("构造函数"),o("code",[_._v("Foo()")]),_._v("的原型属性"),o("code",[_._v("Foo.prototype")]),_._v("指向了它的原型对象，在原型对象里有共有的方法，所有构造函数声明的实例（这里是"),o("code",[_._v("f1，f2")]),_._v("）都可以共享这个方法。")]),_._v(" "),o("hr"),_._v("  \n### :four: 原型对象`Foo.prototype`\n"),o("p",[o("code",[_._v("Foo.prototype")]),_._v("保存着实例共享的方法，有一个指针"),o("code",[_._v("constructor")]),_._v("指回构造函数。")]),_._v(" "),o("hr"),_._v("  \n### :five: 构造函数的实例\n"),o("p",[o("code",[_._v("f1")]),_._v("和"),o("code",[_._v("f2")]),_._v("是"),o("code",[_._v("Foo")]),_._v("这个函数对象的两个实例，这两个对象也有属性"),o("code",[_._v("__proto__")]),_._v("，指向构造函数的原型对象，这样对象的实例就可以访问到原型对象的所有方法了")]),_._v(" "),o("hr"),_._v("  \n### :six: 构造函数也是个对象 —— 函数对象\n"),o("p",[_._v("构造函数"),o("code",[_._v("Foo()")]),_._v("是个对象，它也有"),o("code",[_._v("__proto__")]),_._v("属性，指向谁呢？ 👇")]),_._v(" "),o("p",[_._v("指向它的构造函数的原型对象呗。函数的构造函数不就是"),o("code",[_._v("Function")]),_._v("嘛，因此这里的"),o("code",[_._v("__proto__")]),_._v("指向了"),o("code",[_._v("Function.prototype")]),_._v("。")]),_._v(" "),o("p",[_._v("其实除了"),o("code",[_._v("Foo()")]),_._v("，"),o("code",[_._v("Function()")]),_._v(", "),o("code",[_._v("Object()")]),_._v("也是一样的道理")]),_._v(" "),o("p",[_._v("原型对象也是对象，它的"),o("code",[_._v("__proto__")]),_._v("属性，同理，指向它的构造函数的原型对象呗。这里是"),o("code",[_._v("Object.prototype")]),_._v(".")]),_._v(" "),o("p",[_._v("最后，"),o("code",[_._v("Object.prototype")]),_._v("的"),o("code",[_._v("__proto__")]),_._v("属性指向"),o("code",[_._v("null")]),_._v("。")]),_._v(" "),o("hr"),_._v("  \n## 简单总结\n"),o("ol",[o("li",[_._v("对象有属性"),o("code",[_._v("__proto__")]),_._v(",指向该对象的构造函数的原型对象")]),_._v(" "),o("li",[_._v("方法有属性"),o("code",[_._v("prototype")]),_._v("，也有"),o("code",[_._v("__proto__")]),_._v("，"),o("code",[_._v("prototype")]),_._v("指向该方法的原型对象，"),o("code",[_._v("__proto__")]),_._v("指向该方法的构造函数的原型对象")])])])}),[],!1,null,null,null);o.default=e.exports}}]);