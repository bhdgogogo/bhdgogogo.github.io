(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{520:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("正则表达式不是哪一门语言独有的 —— 它代表了一种规则 —— 符合我们约束的规则")]),t._v(" "),s("p",[t._v("百度百科对其的描述如下 👇")]),t._v(" "),s("blockquote",[s("p",[t._v("正则表达式，又称规则表达式,（"),s("code",[t._v("Regular Expression")]),t._v("，在代码中常简写为"),s("code",[t._v("regex")]),t._v("、"),s("code",[t._v("regexp")]),t._v("或"),s("code",[t._v("RE")]),t._v("），是一种文本模式，包括普通字符（例如，"),s("code",[t._v("a")]),t._v("到"),s("code",[t._v("z")]),t._v(' 之间的字母）和特殊字符（称为"元字符"），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。')])]),t._v(" "),s("p",[t._v("用我自己的话概括就是，"),s("strong",[t._v("正则表达式是一种人为可以设置的规则，用来判断字符串是否符合我们的要求")])]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("JS")]),t._v("中，正则表达式是一个对象，我们可以直接"),s("code",[t._v("new")]),t._v("一个"),s("code",[t._v("RegExp")]),t._v("对象")]),t._v(" "),s("p",[s("code",[t._v("const req = new RegExp()")])]),t._v(" "),s("p",[s("code",[t._v("RegExp()")]),t._v("接受两个参数")]),t._v(" "),s("ol",[s("li",[t._v("第一个参数为字符串或一个"),s("code",[t._v("RegExp")]),t._v("对象 —— 匹配字符串 —— "),s("strong",[t._v("必须")])]),t._v(" "),s("li",[t._v("第二个参数表示"),s("code",[t._v("optional flags")]),t._v(" —— 匹配模式 —— "),s("strong",[t._v("可选")]),t._v(" （比如"),s("code",[t._v("g")]),t._v("表示全局，i 表示不区分大小写，"),s("code",[t._v("m")]),t._v("表示多行）")])]),t._v(" "),s("p",[t._v("利用"),s("code",[t._v("test")]),t._v("方法来判断传入的字符串是否符合要求，我们第一个参数设置了"),s("code",[t._v("“a”")]),t._v("，表示传入的字符串为"),s("code",[t._v('"a"')]),t._v("就返回"),s("code",[t._v("true")]),t._v("，否则返回"),s("code",[t._v("false")])]),t._v(" "),s("p",[t._v("当我们配置第二个参数“i”时，表示忽略大小写，所以此时要判断的字符串是“A”或“a”都会返回 true，否则返回 false")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" req1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" req2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h3",{attrs:{id:"直接使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接使用"}},[t._v("#")]),t._v(" 直接使用")]),t._v(" "),s("p",[s("code",[t._v("const req = /a/i")]),t._v("，这样写的 req 与上面的"),s("code",[t._v('const req2 = new RegExp("a", "i")')]),t._v("效果是一样的")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[s("code",[t._v("req.exec()")]),t._v(" —— 用来获取字符串中符合正则表达式的内容")])]),s("h2",{attrs:{id:"常用的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的"}},[t._v("#")]),t._v(" 常用的")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("在正则表达式中大部分字符都可以直接写")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("|")]),t._v(" 在正则表达式中表示或")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("[]")]),t._v(" 表示或（字符集）")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("[a-z]")]),t._v(" 任意的小写字母\n"),s("code",[t._v("[A-Z]")]),t._v(" 任意的大写字母\n"),s("code",[t._v("[a-zA-Z]")]),t._v(" 任意的字母\n"),s("code",[t._v("[0-9]")]),t._v("任意数字")])])]),t._v(" "),s("li",[s("p",[t._v("[^] 表示除了 ——> "),s("code",[t._v("[^x]")]),t._v(" 表示除了"),s("code",[t._v("x")])])]),t._v(" "),s("li",[s("p",[t._v(". 表示除了换行("),s("code",[t._v("\\n\\r")]),t._v(")外的任意字符")])]),t._v(" "),s("li",[s("p",[t._v("在正则表达式中使用"),s("code",[t._v("\\")]),t._v("作为转义字符")])]),t._v(" "),s("li",[s("p",[t._v("其他的字符集")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\w")]),t._v(" 任意的单词字符 "),s("code",[t._v("[A-Za-z0-9]")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\W")]),t._v(" 除了单词字符 "),s("code",[t._v("[^A-Za-z0-9]")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\d")]),t._v(" 任意数字 "),s("code",[t._v("[0-9]")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\D")]),t._v(" 除了数字 "),s("code",[t._v("[^0-9]")])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\s")]),t._v(" 空格")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("\\S")]),t._v(" 除了空格")])])]),t._v(" "),s("li",[s("p",[t._v("开头和结尾")])])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("^")]),t._v(" 表示字符串的开头")]),t._v(" "),s("li",[s("code",[t._v("$")]),t._v(" 表示字符串的结尾")])]),t._v(" "),s("ol",{attrs:{start:"9"}},[s("li",[t._v("常用修饰符\n"),s("blockquote",[s("p",[s("code",[t._v("i")]),t._v(" —— "),s("code",[t._v("ignore")]),t._v(", 不区分大小写"),s("br"),t._v(" "),s("code",[t._v("g")]),t._v(" ——"),s("code",[t._v("global")]),t._v(" 全局匹配"),s("br"),t._v(" "),s("code",[t._v("m")]),t._v(" —— "),s("code",[t._v("multi line")]),t._v(" 多行匹配\n"),s("code",[t._v("s")]),t._v(" —— 特殊字符圆点 . 中包含换行符 "),s("code",[t._v("\\n")]),t._v(" —— 默认是不包含的")])])])]),t._v(" "),s("h2",{attrs:{id:"一个例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个例子"}},[t._v("#")]),t._v(" 💭 一个例子")]),t._v(" "),s("p",[t._v("检验输入的字符串是否为合格的"),s("code",[t._v("url")])]),t._v(" "),s("h3",{attrs:{id:"分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),s("ul",[s("li",[t._v("开始符: "),s("code",[t._v("^")])]),t._v(" "),s("li",[t._v("协议名： "),s("code",[t._v("http(s)或ftp, rtsp")]),t._v("😕/ 表示 ——> "),s("code",[t._v("((https|http|ftp|rtsp|mms)?:\\/\\/)")]),t._v("\n没有可以，但是有的话只能有其中的一个，所以用?修饰")]),t._v(" "),s("li",[t._v('域名部分：主机名可以使用"-"符号，所以两种情况都要判断，'),s("strong",[t._v('包含"-"'),s("strong",[t._v("或")]),t._v('不包含"-"')]),t._v('\n包含"-" ——> '),s("code",[t._v("[A-Za-z0-9]+-[A-Za-z0-9]+")]),t._v(" 字符组都是不止一个 "),s("code",[t._v("wdw-32dw")]),t._v('\n不包含"-" ——> '),s("code",[t._v("[a-zA-Z0-9]+")]),t._v(" 字符组也是不止一个所以要在最后加上+ 比如"),s("code",[t._v("www")]),t._v("\n然后加上点，最后要设置+ 因为"),s("code",[t._v("www.www.www.")]),t._v("这种情况也是存在的")]),t._v(" "),s("li",[t._v("顶级域名： "),s("code",[t._v("com,cn")]),t._v(" 这些域名的长度都在 2-6 位 ——> "),s("code",[t._v("[a-zA-z]{2,6}")])]),t._v(" "),s("li",[t._v("端口 比如"),s("code",[t._v(":8080")]),t._v(" 不止一个数字 可以没有 有的话只能有一个 "),s("code",[t._v("/d")]),t._v("用来匹配数字 ——> "),s("code",[t._v("(:\\d+)?")])]),t._v(" "),s("li",[t._v("请求路径： 比如"),s("code",[t._v("/login/item")]),t._v(" 可以有多个 可以没有请求路径 但是这个部分有的话只能有一个 ——> "),s("code",[t._v("(\\/.*)？")])]),t._v(" "),s("li",[t._v("query 传参和哈希值 比如"),s("code",[t._v("?age=1")]),t._v(" 可以有多个 可以不传参 但是这个部分只能有一个 ——> "),s("code",[t._v("(\\?.*)(#.*)？")])]),t._v(" "),s("li",[t._v("结束符： "),s("code",[t._v("$")])])]),t._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("_isUrl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 补全代码")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^((https|http|ftp|rtsp|mms)?:\\/\\/)(([a-zA-Z0-9]+-[a-zA-Z0-9]+|[a-zA-Z0-9]+)\\.)+([a-zA-Z]{2,6})(:\\d+)?(\\/.*)?(\\?.*)?(#.*)?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" judge1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_isUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://.com:80?name=?&age=1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" judge2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_isUrl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://a.b.c.com:8080/get?name=?&age=1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("judge1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" judge2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);